/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DropdownConfig, QuillInstance, ToolbarConfig, UnionEditorType, UnionIcons, UnionUnclearReason } from "./lib/types";
export { DropdownConfig, QuillInstance, ToolbarConfig, UnionEditorType, UnionIcons, UnionUnclearReason } from "./lib/types";
export namespace Components {
    interface XecButton {
        "active"?: boolean;
        "icon"?: UnionIcons;
        "iconOnly"?: boolean;
        "iconPosition"?: 'leading' | 'trailing';
        "outlined"?: boolean;
        "rotateOnActive"?: boolean;
        "rounded"?: boolean;
        "stretched"?: boolean;
        "variation"?: 'default';
    }
    interface XecDropdown {
        "config": DropdownConfig;
    }
    interface XecEditor {
        "config": ToolbarConfig;
        "getQuillInstances": () => Promise<Map<UnionEditorType, QuillInstance>>;
        "lock": () => Promise<void>;
        "unlock": () => Promise<void>;
    }
    interface XecIcon {
        "icon": UnionIcons;
        "library"?: string;
        "viewBox"?: string;
    }
    interface XecPopup {
        "closePopup": () => Promise<void>;
        "openPopup": () => Promise<void>;
        "setContent": (content: string) => Promise<void>;
    }
    interface XecToolbar {
        "config": ToolbarConfig;
        "disabled": boolean;
        "textDirection": 'LTR'|'RTL';
        "viewRaw": boolean;
    }
}
export interface XecButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXecButtonElement;
}
export interface XecIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXecIconElement;
}
export interface XecToolbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXecToolbarElement;
}
declare global {
    interface HTMLXecButtonElementEventMap {
        "clickButton": HTMLDivElement;
    }
    interface HTMLXecButtonElement extends Components.XecButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXecButtonElementEventMap>(type: K, listener: (this: HTMLXecButtonElement, ev: XecButtonCustomEvent<HTMLXecButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXecButtonElementEventMap>(type: K, listener: (this: HTMLXecButtonElement, ev: XecButtonCustomEvent<HTMLXecButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXecButtonElement: {
        prototype: HTMLXecButtonElement;
        new (): HTMLXecButtonElement;
    };
    interface HTMLXecDropdownElement extends Components.XecDropdown, HTMLStencilElement {
    }
    var HTMLXecDropdownElement: {
        prototype: HTMLXecDropdownElement;
        new (): HTMLXecDropdownElement;
    };
    interface HTMLXecEditorElement extends Components.XecEditor, HTMLStencilElement {
    }
    var HTMLXecEditorElement: {
        prototype: HTMLXecEditorElement;
        new (): HTMLXecEditorElement;
    };
    interface HTMLXecIconElementEventMap {
        "clickIcon": SVGElement;
    }
    interface HTMLXecIconElement extends Components.XecIcon, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXecIconElementEventMap>(type: K, listener: (this: HTMLXecIconElement, ev: XecIconCustomEvent<HTMLXecIconElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXecIconElementEventMap>(type: K, listener: (this: HTMLXecIconElement, ev: XecIconCustomEvent<HTMLXecIconElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXecIconElement: {
        prototype: HTMLXecIconElement;
        new (): HTMLXecIconElement;
    };
    interface HTMLXecPopupElement extends Components.XecPopup, HTMLStencilElement {
    }
    var HTMLXecPopupElement: {
        prototype: HTMLXecPopupElement;
        new (): HTMLXecPopupElement;
    };
    interface HTMLXecToolbarElementEventMap {
        "clickViewRaw": void;
        "clickViewXML": void;
        "clickUnclear": UnionUnclearReason;
        "clickRTL": void;
        "clickLTR": void;
    }
    interface HTMLXecToolbarElement extends Components.XecToolbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXecToolbarElementEventMap>(type: K, listener: (this: HTMLXecToolbarElement, ev: XecToolbarCustomEvent<HTMLXecToolbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXecToolbarElementEventMap>(type: K, listener: (this: HTMLXecToolbarElement, ev: XecToolbarCustomEvent<HTMLXecToolbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXecToolbarElement: {
        prototype: HTMLXecToolbarElement;
        new (): HTMLXecToolbarElement;
    };
    interface HTMLElementTagNameMap {
        "xec-button": HTMLXecButtonElement;
        "xec-dropdown": HTMLXecDropdownElement;
        "xec-editor": HTMLXecEditorElement;
        "xec-icon": HTMLXecIconElement;
        "xec-popup": HTMLXecPopupElement;
        "xec-toolbar": HTMLXecToolbarElement;
    }
}
declare namespace LocalJSX {
    interface XecButton {
        "active"?: boolean;
        "icon"?: UnionIcons;
        "iconOnly"?: boolean;
        "iconPosition"?: 'leading' | 'trailing';
        "onClickButton"?: (event: XecButtonCustomEvent<HTMLDivElement>) => void;
        "outlined"?: boolean;
        "rotateOnActive"?: boolean;
        "rounded"?: boolean;
        "stretched"?: boolean;
        "variation"?: 'default';
    }
    interface XecDropdown {
        "config"?: DropdownConfig;
    }
    interface XecEditor {
        "config"?: ToolbarConfig;
    }
    interface XecIcon {
        "icon"?: UnionIcons;
        "library"?: string;
        "onClickIcon"?: (event: XecIconCustomEvent<SVGElement>) => void;
        "viewBox"?: string;
    }
    interface XecPopup {
    }
    interface XecToolbar {
        "config"?: ToolbarConfig;
        "disabled"?: boolean;
        "onClickLTR"?: (event: XecToolbarCustomEvent<void>) => void;
        "onClickRTL"?: (event: XecToolbarCustomEvent<void>) => void;
        "onClickUnclear"?: (event: XecToolbarCustomEvent<UnionUnclearReason>) => void;
        "onClickViewRaw"?: (event: XecToolbarCustomEvent<void>) => void;
        "onClickViewXML"?: (event: XecToolbarCustomEvent<void>) => void;
        "textDirection"?: 'LTR'|'RTL';
        "viewRaw"?: boolean;
    }
    interface IntrinsicElements {
        "xec-button": XecButton;
        "xec-dropdown": XecDropdown;
        "xec-editor": XecEditor;
        "xec-icon": XecIcon;
        "xec-popup": XecPopup;
        "xec-toolbar": XecToolbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "xec-button": LocalJSX.XecButton & JSXBase.HTMLAttributes<HTMLXecButtonElement>;
            "xec-dropdown": LocalJSX.XecDropdown & JSXBase.HTMLAttributes<HTMLXecDropdownElement>;
            "xec-editor": LocalJSX.XecEditor & JSXBase.HTMLAttributes<HTMLXecEditorElement>;
            "xec-icon": LocalJSX.XecIcon & JSXBase.HTMLAttributes<HTMLXecIconElement>;
            "xec-popup": LocalJSX.XecPopup & JSXBase.HTMLAttributes<HTMLXecPopupElement>;
            "xec-toolbar": LocalJSX.XecToolbar & JSXBase.HTMLAttributes<HTMLXecToolbarElement>;
        }
    }
}
